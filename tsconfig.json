{
  /* Visit https://aka.ms/tsconfig.json to read more about this file */
  "compilerOptions": {
    /* Basic Options */
    // Enable incremental compilation
    "incremental": true,
    // target es5 for better compatibility
    "target": "es5",
    // "module": "commonjs"                   /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */,
    "module": "umd" /* Specify module code generation: 'umd', 'ESNext'. */,
    // Specify library files to be included in the compilation.
    // Need Proxy and String[].includes
    "lib": ["es6", "es2017", "dom"],
    // Allow javascript files to be compiled.
    "allowJs": true,
    // Report errors in .js files.
    "checkJs": true,
    // Generates corresponding '.d.ts' file.
    "declaration": true,
    // "declarationMap": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */
    // "sourceMap": true,                     /* Generates corresponding '.map' file. */
    // "outFile": "./",                       /* Concatenate and emit output to single file. */
    // Using outDir instead
    // https://basarat.gitbook.io/typescript/main-1/outfile
    // Rely on build tool to generate single .js file
    "outDir": "./dist",
    // Seems hard to set composite:
    // https://www.typescriptlang.org/tsconfig#composite
    // https://www.typescriptlang.org/docs/handbook/project-references.html#composite
    // "composite": true,                     /* Enable project compilation */
    // Needed for incremental
    // "tsBuildInfoFile": "./",               /* Specify file to store incremental compilation information */
    // Do not emit comments to output.
    "removeComments": true,
    // "importHelpers": true,                 /* Import emit helpers from 'tslib'. */
    // https://www.typescriptlang.org/tsconfig#downlevelIteration
    // "downlevelIteration": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */
    // https://www.typescriptlang.org/tsconfig#isolatedModules
    // "isolatedModules": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */

    /* Strict Type-Checking Options */
    // Enable all strict type-checking options.
    "strict": true,
    // Raise error on expressions and declarations with an implied 'any' type.
    "noImplicitAny": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictBindCallApply": true,
    "strictPropertyInitialization": true,
    "noImplicitThis": true,
    "alwaysStrict": true,

    /* Additional Checks */
    // "noUnusedLocals": true,                /* Report errors on unused locals. */
    // "noUnusedParameters": true,            /* Report errors on unused parameters. */
    // "noImplicitReturns": true,             /* Report error when not all code paths in function return a value. */
    // "noFallthroughCasesInSwitch": true,    /* Report errors for fallthrough cases in switch statement. */

    /* Module Resolution Options */
    // Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6).
    "moduleResolution": "node",
    // "baseUrl": "./",                       /* Base directory to resolve non-absolute module names. */
    // "paths": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */
    // "rootDirs": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */
    // "typeRoots": [],                       /* List of folders to include type definitions from. */
    // "types": [],                           /* Type declaration files to be included in compilation. */
    // Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'.
    "esModuleInterop": true,
    // Allow default imports from modules with no default export. This does not affect code emit, just typechecking.
    "allowSyntheticDefaultImports": true,
    // "preserveSymlinks": true,              /* Do not resolve the real path of symlinks. */
    // "allowUmdGlobalAccess": true,          /* Allow accessing UMD globals from modules. */

    /* Source Map Options */
    // "sourceRoot": "",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */
    // "mapRoot": "",                         /* Specify the location where debugger should locate map files instead of generated locations. */
    // "inlineSourceMap": true,               /* Emit a single file with source maps instead of having a separate file. */
    // "inlineSources": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */

    /* Experimental Options */
    // "experimentalDecorators": true,        /* Enables experimental support for ES7 decorators. */
    // "emitDecoratorMetadata": true,         /* Enables experimental support for emitting type metadata for decorators. */

    /* Advanced Options */
    "skipLibCheck": true /* Skip type checking of declaration files. */,
    "forceConsistentCasingInFileNames": true /* Disallow inconsistently-cased references to the same file. */
  },

  "include": ["./src/**/*"]
}
